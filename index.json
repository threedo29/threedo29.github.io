[{"categories":"Embedded","contents":"동기식 시리얼 통신 프로토콜 ② - I2C I2C 하드웨어 구성  I2C(Inter-Integrated Circuit) 버스는 MCU와 저속 주변 장치 사이의 통신을 위한 용도로 개발된 규격 두 가닥의 선을 사용하므로 TWI(Two Wire Interface)라고 불리기도 한다. (특허권 등의 이유 때문인지 Philips 이외의 회사들은 거의 대부분 TWI라고 부른다.)  그림 1 I2C 통신 연결\n I2C 버스는 양방향 Open Drain 선인 SCL(Serial Clock)과 SDA(Serial Data)로 이루어져 있다. SCL과 SDA선은 모두 Open Drain 이므로 각각에 풀업 저항을 연결해 주어야 한다. Master-Slave 관계로 통신한다.(master도 2개 이상으로 연결될 수 있으므로 N : N 통신 가능) Master가 생성하는 SCL을 기준으로 데이터를 송수신한다. SDA 하나의 선을 통해 데이터를 주고 받으므로 반이중(Half Duplex) 통신만 가능하다. (데이터 전송 순간에는 반드시 하나의 master와 하나의 slave 만이 데이터를 주고 받을 수 있다.)   Slave 주소\n 모든 master와 slave가 SCL, SDA 라인을 공유하므로 slave를 개별적으로 지정하기 위한 방법 모든 slave 장치들은 7bit의 고유한 주소를 갖는다. (최대 128개 slave 연결 가능)    Master가 다수인 경우 : 현재 통신을 진행하고 있는 master가 버스 소유권을 가진다. 해당 master와 그와 통신을 진행중인 slave 둘 이외의 장치는 통신을 방해하지 않아야 한다.   Open Drain 연결의 의미\n 연결된 장치 하나가 데이터 전송을 위해 Low 신호를 넣고 있으면 다른 장치들은 이것을 강제로 High로 바꿀 수 없다는 것 반대로 통신에 참여하지 않는 장치가 SCL이나 SDA로 Low 신호를 출력하면 master가 정상적으로 통신을 진행할 수 없다. → 통신 참여하지 않는 장치는 출력을 floating 상태로 유지해야 한다. 외부 풀업 저항으로 인해 통신 라인 사용이 끝나면 자동으로 High 상태로 복귀한다. 별도의 Level Shifter 회로가 필요하지 않다.   I2C 패킷 기본구조 그림 2 I2C 통신 패킷 기본 구조\n I2C가 전송하는 메시지는 2개의 프레임으로 주소(Address) 프레임과 데이터(Data) 프레임으로 구성된다.  통신 시작 조건  먼저 데이터가 전송되는 slave를 정하기 위해 주소 프레임부터 전송해야 한다. 이를 위해 master는 SCL 라인을 High, SDA 라인을 Low로 변경한다. → 모든 slave 장치들에게 데이터를 전송할 준비가 되었다는 신호 여러 개의 master가 연결되어 있다면 SDA 라인을 Low로 잡는 것이 제어권을 갖는다.  주소 프레임 (Address Frame)  모든 통신 데이터 앞에 위치 SDA로 처음 수신되는 1byte 중 앞선 7bit 데이터(MSB 순서)가 주소를 의미한다. 마지막 1bit(8번째 bit) 읽기(read, 1, 데이터 요청) 또는 쓰기(write, 0, 데이터 전송) 동작을 표시한다. 9번째 bit는 ACK/NACK : 데이터 전송의 성공/실패를 알리는 신호로 master가 전송한 주소 정보(8bit)에 해당하는 장치가 만들어 줘야하는 신호. 주소 프레임, 데이터 프레임 각각 끝에 항상 붙는다.(ACK : 1, 정상, NACK : 0, 비정상)  데이터 프레임 (Data Frame)  주소 프레임의 전송이 완료된 후 데이터 프레임 전송 시작 Read, Write를 나타내는 주소 프레임의 bit에 따라 master 또는 slave가 사용한다.  통신 종료 조건  종료 신호 : SCL을 Low에서 High 상태로 바꾼 후 SDA 라인을 Low에서 High로 변경한다. SCL이 High인 상태에서 SDA 라인의 상태를 변경해서는 안된다.  I2C의 장점  Slave 수에 관계 없이 두 라인만으로 양방향 통신이 가능하다. 두 개 이상의 master를 연결할 수 있다.  I2C의 단점  Open Drain 구조 기반으로 인해 동시 양방향 통신(Full Duplex)이 불가능 SPI에 비하면 매우 낮은 속도이므로 저속 주변장치와의 통신, 주변 장치의 동작 모드 설정 등의 용도로 사용 Slave 주소가 7bit로 길이가 제한되어 있어 slave들의 주소가 충돌할 가능성 존재  ","permalink":"https://threedo29.github.io/posts/synchronous-serial-protocol2/","tags":null,"title":"동기식 시리얼 통신 프로토콜2"},{"categories":"Embedded","contents":"동기식 시리얼 통신 프로토콜 ① - SPI 동기식 시리얼 통신 사용 효과  비동기식 시리얼 통신의 주요 문제점 : 비동기식 시리얼 통신은 clock 신호를 사용하지 않기 때문에 통신 장치 간의 baud rate mismatch를 방지하기 위해서 데이터 패킷에 동기화 비트를 추가하게 된다.\n→ 결국 1byte를 전송할 때마다 start/stop bit가 생성되고 전송시 마다 sync를 맞춰야 하므로 오버헤드가 발생하고 복잡한 하드웨어 컨트롤러가 필요하다. 위의 동기식 통신의 주요 문제점을 해결하기 위해 동기식 시리얼 통신 프로토콜을 사용하게 된다. 별도의 clock 라인을 공유함으로써 통신 참여자 끼리 데이터가 언제 들어오는지 알 수 없게 하는 방식 → 장치들 끼리 baud rate를 공유할 필요가 없으며 각 장치의 clock을 동일하게 유지해야 할 필요가 없다.  SPI 데이터 수신  SPI(Serial Peripheral Interface)는 동기식 시리얼 통신이다. 클럭 신호를 생성하는 장치 : master,\n나머지 통신에 참가한 장치들 : slave\n* Master가 Slave로부터 데이터를 수신할 때도 수신용 클럭 신호를 생성한다. 클럭 신호를 이용하는 SPI는 1 : N 통신이 가능하므로 slave는 1개 이상의 장치가 될 수 있다. 대부분 MCU가 master가 된다.  그림 1 SPI 통신 Master, Slave 연결 라인과 데이터 전송\n 세 개의 라인이 통신에 사용 (MOSI, MISO, SCLK)  MOSI(Master Out / Slave In) 데이터 라인 : 데이터가 master에서 slave로 전달 MISO(Master In / Slave Out) 데이터 라인 : 데이터가 slave에서 master로 전달   두 개의 데이터 라인의 존재로 인해 전이중(full duplex) 통신이 가능하다. UART 통신과는 달리 데이터를 송수신하기 위한 클럭 신호를 미리 생성시켜준다.(SCLK)\n* 아무 대나 데이터 송수신이 가능한 UART에 비해 비효율적이지 않은가?\nA) 특히 센서와 통신할 때 큰 문제가 되지 않는다. master에서 명령어를 전송하면 센섯는 자신이 전송할 데이터의 크기가 얼마인지 전달해주고 그에 따라 데이터 전체를 받기 위한 클럭 신호를 생성하게 된다.  Slave 장치 선택 그림 2 SPI 통신 1 : 1 연결\n 각 slave 장치들은 Chip Enable (CE 또는 CS - Chip Select) 입력을 가지고 있으며 이 입력이 활성화 되었을 때만 동작한다. Master는 여러 개의 Slave Select (SS 또는 CS - Chip Select) 라인이 slave들의 Chip Enable과 연결되어 있다. 데이터를 송신/수신 할 때 SS를 High에서 Low로 전환시켜 해당 slave를 활성화 시킨다. (active low) 2개 이상의 slave와 연결되어 있을 때는 SS을 제어하는 통신할 SLAVE를 선택할 수 있다.  그림 3 SPI 통신 1 : N\n 1 : N 연결에서는 SCLK, MOSI, MISO가 모든 master, slave에 각각 연결되어 공유된다. 하지만 slave의 CS 신호는 서로 묶이지 않고 각각 다른 하나의 Master의 SS와 연결된다. Slave 수에 상관없이 한 순간에는 하나의 slave만 master와 통시할 수 있다.(모두 활성화 되면 MISO에서 서로 다른 데이터가 충돌이 발생할 수 있다.) 선택되지 않은 SLAVE는 CS로 High 값을 받아 MISO 출력을 Hi-Z상태로 만든다.(외부 통신에 영향을 주지 않는ㄷ나.) 또한, master의 SCLK, MOSI 신호는 무시한다.  SPI의 장점  최고 70㎒에 이르는 빠른 통신 속도와 양방향 통신 가능 전송 데이터 단위에 제약이 없다. 8, 16, 24bit 등 원하는 길이를 한 워드로 설정 가능 데이터의 bit 전송 순서가 상관업사.ㄷ MSB 또는 LSB부터 전송해도 상관 없다. I2C와 달리 slave가 자체 주소를 가지고 있지 않으므로 주소 충돌의 문제가 발생하지 않든다.  SPI의 단점  I2C와 달리 SPI 버스에는 한 개의 버스 master만 (라인이 연결 되어 있더라도 통신시에는 하나만) 있을 수 있다. I2C에 비해 필요ㅕ한 핀의 수가 많다. CS핀의 수 역시 slave 수에 비례하여 늘어난다. I2C의 ACK와 같은 메커니즘이 없어서 master가 자신이 통신하고 있는 장치가 실제로 존재하는 여부를 알 수 없다.  ","permalink":"https://threedo29.github.io/posts/synchronous-serial-protocol1/","tags":null,"title":"동기식 시리얼 통신 프로토콜1"},{"categories":"Embedded","contents":"비동기식 시리얼 프로토콜 (UART) Baud Rate (통신 속도)  시리얼 라인으로 전송되는 데이터 속도를 의미 bps(bits per second) 단위로 표시 baud rate를 통해 1bit 데이터가 전송되는데 필요한 시간을 알 수 있다.\n: 1bit 데이터를 전송할 때 시리얼 라인을 high 또는 low 값으로 유지하는 시간(전송) 즉, 데이터를 받기 위해 시리얼 라인을 체크하는 시간(수신) baud rate 값이 높을수록 전송/수신 속도가 빠르지만 일반적인 MCU에서 115,200을 초과할 수 없다. 주의할 점 : baud rate 값이 너무 높거나 전송/수신 양단의 설정값이 다를 경우 데이터 수신에 문제가 생길 수 있다.  데이터 구조 그림 1 비동기 시리얼 통신 데이터 구조\n 전송에 사용되는 데이터 패킷 구성은 위의 그림과 같다. Start bit를 제외하고 가변적인 크기를 가질 수 있다.  데이터 영역 (Data Chunk)  실제 전송할 데이터를 의미 기본적으로 8bit의 사이즈를 가지지만 5 ~ 9bit 사이의 다른 사이즈를 가질 수 있다. 7bit 크기의 경우 7bit ASCII 문자를 보내는 데 적합하다.  동기화 비트 (Synchronization bits) → start bit, stop bit 해당  2개 혹은 3개의 특수한 비트로 전송되는 데이터 패킷의 시작과 끝을 알려준다. 일반적으로 start bit, stop bit 둘 다 1bit 크기 데이터 전송이 없는 상태 (idle 상태)에서 start bit는 0으로, stop bit는 1로 표시  패리티 비트 (Parity bits) → 사용 할 수도 있고 사용 안 할 수도 있다.  단순 저레벨 에러 보정 방법으로 사용되는 비트 데이터 영역에 해당하는 5 ~ 9bit의 1의 개수를 세어 홀수, 짝수인지를 판단하여 0(짝수) 또는 1(홀수) 값을 패리티 비트로 기록 (데이터 : 0b01011101 일 경우 1이 5개 이므로 패리티 비트는 1로 설정) 선택사항(optional)이므로 잘 사용되지 않는다. 장점 : 노이즈에 취약한 환경에서 데이터 오류를 판단할 수 있도록 한다. 단점 : 송신, 수신측에 추가적인 연산에 대한 부담이 생긴다. 또한 문제가 발견되면 다시 데이터 전송과 수신이 이루어져야 한다.  데이터 구조 예시 ex) \u0026ldquo;9600 8N1\u0026rdquo; : Serial 통신의 설정을 표시한 것.\nBaud rate가 9600, 8 data bits, no parity and 1 stop bit 설정을 의미한다.\n Ex) ASCII 문자 \u0026lsquo;O\u0026rsquo;, \u0026lsquo;K\u0026rsquo;를 전송\nASCII 코드로 \u0026lsquo;O\u0026rsquo;는 79 이므로 이진수로 01001111 \u0026lsquo;K\u0026rsquo;는 75 이므로 이진수로 01001011이 된다.\n패킷은 기본적으로 LSB First 방식으로 보내진다. 따라서 \u0026lsquo;O\u0026rsquo;와 \u0026lsquo;K\u0026rsquo;를 나타내는 비트가 역전되어 가장 우측의 비트부터 우선 전송된다.\n그림 2 \u0026lsquo;O\u0026rsquo;와 \u0026lsquo;K\u0026rsquo; 데이터가 포함된 두 개의 패킷\n9600bps 속도로 전송하므로 하나의 비트를 보내는데 걸리는 시간은 1/(9600bps) = 104㎲\nStart bit와 stop bit가 더해져서 하나의 패킷은 10bit\n1byte = 8bit 이므로 초당 960byte를 전송할 수 있다.  연결 방법 그림 3 시리얼 통신 라인과 연결\n 시리얼 버스 구성 : 송신용(TX), 수신용(RX) RX, TX는 각 장치의 입장을 기준으로 담당하는 역할에 따라 정해진다. 두 장치를 여결할 때는 TX - RX, RX - TX로 엇갈리게 연결 Full-duplex(전이중) 방식 또는 Half-duplex(반이중) 방식으로 동작할 수 있다.  UART  Universal Asynchronous Receiver/Transmitter 의 약자. 비동기 통신을 위한 전용 하드웨어를 의미 필수적으로 UART는 패러럴과 시리얼 인터페이스를 상호 변환하는 역할을 한다.  그림 4 UART 구조도\n 동기화 비트(start, stop bit)와 패리티 비트를 더해 데이터 패킷을 생성하는 작업 송신 : baud rate에 맞춰 정확한 타이밍으로 TX 라인을 통해 데이터 전송 수신 : baud rate에 맞춰 RX 라인을 통해 신호를 읽고 데이터 분리  이 외 유의사항 (Bus Contention)  시리얼 통신은 1 : 1 통신을 위해 디자인 되었지만 임의로 1 : N 통신처럼 연결할 수 있다.  그림 5 송신자 : 두 개의 주변장치, 수신자 : MCU\n 두 개의 보조 모듈 송신자(예를 들어 각각 GPS와 PC)가 동시에 데이터를 전송하는 경우 문제가 발생한다. 위의 연결에서 동작이 가능하기 위해서는 적절한 보호회로가 필요하다.  그림 6 송신자 : MCU, 수신자 : 두 개의 주변장치\n 여러 개의 장치가 데이터를 수신만 하는 경우라면 위의 연결 방식은 문제없이 동작 Clock 라인만 추가되면 I2C 동작 방식과 유사  ","permalink":"https://threedo29.github.io/posts/asynchronous-serial-protocol/","tags":null,"title":"비동기식 시리얼 프로토콜"},{"categories":"Embedded","contents":"시리얼 인터페이스의 종류 (동기식/비동기식) 동기식(Synchronous) 시리얼 인터페이스  데이터 라인(Data Line)의 동작을 클럭 시그널(Clock Signal)의 동작과 동기화(같은 타이밍에 동작)시킨다. 시리얼 버스에 함께 연결된 장치들이 이 클럭 신호를 공유하게 되어 모두 신호에 맞춰 동작하게 된다. (두 대의 송수신 시스템이 통신과정에서 시차가 달라 데이터를 잘못 해석할 가능성을 방지) 통신에 관여하는 주체들 간에 주종 관계가 존재 (master : 통신의 주도권을 가지는 주체, slave : 통신에서 종속적인 주체) 따라서 master가 출력하는 클럭 신호에만 반응할 수 있으므로 송수신과 상관 없이 master가 통신을 주도 (보통 프로세서 : master, 주변장치 : slave) 장점 : 직관적이다, 전송효율과 전송속도가 높다. 단점 : 클럭 신호를 위한 하나의 라인을 더 필요로 한다.  비동기식(Asynchronous) 시리얼 인터페이스  데이터가 외부 클럭 시그널(external clock signal)의 도움 없이 동작하는 것을 의미 대신 클럭 신호 없이 데이터를 안정적으로 전송, 수신할 수 있는 방법이 추가된다.\n→ 하나의 글자를 나타내는 코드의 전후에 start bit 와 stop bit 를 넣어 블록의 동기화를 취해준다. 일반적으로 시리얼 통신이라 부르는 것들 대부분 비동기 시리얼 통신을 사용 장점 :  비동기 통신은 클럭 신호를 위한 라인을 필요로 하지 않는다. 송신용 선과 수신용 선 두 가닥만 존재하여 두 주체가 동시에 데이터를 주고 받는 양방향 통신인 전이중(full duplex)통신 이 가능하다. 통신에 참여하는 두 주체가 서로 대등한 관계에서 일대일 통신 : 양쪽 모두 원하는 때에 언제든지 데이터를 보낼 수 있다.   단점 : 추가된 start bit와 stop bit로 인해 필요한 데이터만 연속적으로 보낼 수 없고 적어도 10bit 이상 길이의 패킷을 전송해야 하므로 효율이 떨어진다.  표 1 동기식 전송과 비동기식 전송 비교\n","permalink":"https://threedo29.github.io/posts/kind-of-serial-interface/","tags":null,"title":"시리얼 인터페이스의 종류"},{"categories":"Embedded","contents":"MCU 통신  임베디드 시스템은 각종 프로세서와 회로들 간에 서로 데이터를 주고 받는 통신을 필수적으로 하게 된다. 통신을 위한 표준 프로토콜이 존재하고 크게 두 종류로 나눌 수 있다.  Parallel(병렬) 통신 그림 1 병렬 통신 방식\n 데이터 전송을 다수의 비트로 한 번에 전송하는 방법 타이밍(Clock)에 맞춰 모든 라인이 같이 동작하여 데이터를 전송할 수 있도록 Clock(CLK)라인이 추가된다. (8 bit data bus의 경우 9라인이 사용) 장점 : 빠르다, 구현이 쉽다. 단점 : input / output 라인을 많이 소요하게 된다.  Serial(직렬) 통신 그림 2 직렬 통신 방식\n 데이터를 직렬화하여 한 주기에 한 비트 씩을 전송하는 방법 Clock 라인을 포함하여 2개 라인을 사용하여 데이터 전송 장점 : input / output 라인을 아낄 수 있다. -\u0026gt; MCU에서 과도한 포트 사용을 지양해야 하므로 Serial 방식 사용 단점 : 속도가 느리다.  ","permalink":"https://threedo29.github.io/posts/serial-communication/","tags":null,"title":"MCU 통신"}]